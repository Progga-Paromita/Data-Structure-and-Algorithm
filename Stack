//stack using array

#include<iostream>
using namespace std;

#define MAX 10

class stack
{
   int item[MAX];
   int top;
   public:
       stack()
       {
           top=-1;
       }
      bool isFull()
       {
           return top==MAX-1;
       }
       bool isEmpty()
       {
           return top==-1;
       }
       void push(int newItem)
       {
           if(isFull())
           {
               cout<<"Stack Full"<<endl;
           }
           else
           {
               item[++top]=newItem;          }
       }
       void pop()
       {
           if(isEmpty())
           {
               cout<<"stack Empty"<<endl;
           }
           else
           {
               cout<<endl<<"The poped item is="<<item[top--];
           }
       }
       void display()
       {
           cout<<endl<<"the stack:";
           for(int i=0;i<=top;i++)
           {
               cout<<item[i]<<" ";
           }
           cout<<endl;
       }
       int GetTop()
       {
          cout<<"The top="<<item[top]<<endl;
       }
};

int main()
{
    stack s;
    s.push(1);
    s.push(2);
    s.push(3);
    s.push(4);
    s.push(5);
    s.display();
    s.pop();
    s.display();
    s.GetTop();
    return 0;
}







//stack using list



#include <iostream>
#include <list>

using namespace std;

class Stack {
private:
    list<int> items;

public:
    // Check if the stack is empty
    bool isEmpty() {
        return items.empty();
    }

    // Add element to the stack
    void push(int newItem) {
        items.push_back(newItem);
    }

    // Remove element from the stack
    void pop() {
        if (isEmpty()) {
            cout << "STACK EMPTY" << endl;
        } else {
            cout << "Item popped = " << items.back() << endl;
            items.pop_back();
        }
    }

    // Print elements of the stack
    void printStack() {
        if (isEmpty()) {
            cout << "Stack is empty!" << endl;
        } else {
            cout << "Stack: ";
            for (int item : items) {
                cout << item << " ";
            }
            cout << endl;
        }
    }
};

// Driver code
int main() {
    Stack s;

    s.push(1);
    s.push(2);
    s.push(3);
    s.push(4);

    s.printStack();

    s.pop();

    cout << "\nAfter popping out\n";
    s.printStack();

    return 0;
}











//stack using linked list


#include <iostream>

using namespace std;

// Node class to represent each element in the linked list
class Node {
public:
    int data;
    Node* next;

    // Constructor to initialize a node with data
    Node(int newData) {
        data = newData;
        next = nullptr;
    }
};

class Stack {
private:
    Node* top;  // Pointer to the top of the stack

public:
    // Constructor to initialize the stack (empty stack)
    Stack() {
        top = nullptr;
    }

    // Destructor to clean up dynamically allocated memory
    ~Stack() {
        while (!isEmpty()) {
            pop();
        }
    }

    // Check if the stack is empty
    bool isEmpty() {
        return top == nullptr;
    }

    // Add element to the stack
    void push(int newItem) {
        Node* newNode = new Node(newItem);  // Create a new node with data
        newNode->next = top;  // Make the next pointer of the new node point to the current top
        top = newNode;  // Move the top pointer to the new node
    }

    // Remove element from the stack
    void pop() {
        if (isEmpty()) {
            cout << "STACK EMPTY" << endl;
        } else {
            Node* temp = top;  // Store the top node temporarily
            cout << "Item popped = " << top->data << endl;
            top = top->next;  // Move the top pointer to the next node
            delete temp;  // Delete the old top node to free memory
        }
    }

    // Print elements of the stack
    void printStack() {
        if (isEmpty()) {
            cout << "Stack is empty!" << endl;
        } else {
            Node* current = top;
            cout << "Stack: ";
            while (current != nullptr) {
                cout << current->data << " ";
                current = current->next;
            }
            cout << endl;
        }
    }
};

// Driver code
int main() {
    Stack s;

    s.push(1);
    s.push(2);
    s.push(3);
    s.push(4);

    s.printStack();

    s.pop();

    cout << "\nAfter popping out\n";
    s.printStack();

    return 0;
}













//parentheses check using stackk

#include<iostream>
#include<stack>

using namespace std;
bool check(string s)
{
    stack<char> st;
    for(char c: s)
    {
        if(c=='('||c=='{'||c=='[')
        {
            st.push(c);
        }

        else if(c==')'||c=='}'||c==']')
        {
            if(st.empty())
            {
                return false;
            }
            char top=st.top();
             if(c==')'&&top!='('||c=='}'&&top!='{'||c==']'&&top!='[')
            {
                return false;
            }
            st.pop();
        }
    }
    return st.empty();
}


int main()
{
    string s;
    cin.ignore();
    getline(cin,s);
    cout<<(check(s)?"true\n":"false\n");
    return 0;
}





